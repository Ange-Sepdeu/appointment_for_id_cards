class UserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email', 'is_active']







        on this user_panel ({% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

    <!-- Animate CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>

    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'css/user_dashboard.css' %}">
</head>
<body>
    <div class="dashboard">
        <div class="dashboard-nav">
            <header>
                <a href="#" class="brand-logo animate__animated animate__fadeInLeft"><i class="fas fa-id-card"></i> <span>{{ user.username }}'s Panel</span></a>
            </header>
            <nav class="dashboard-nav-list">
                <a href="{% url 'book_appointment' %}" class="dashboard-nav-item animate__animated animate__fadeInLeft"><i class="fas fa-calendar-plus"></i> Book Appointment</a>
                <a href="{% url 'upload_document' %}" class="dashboard-nav-item animate__animated animate__fadeInLeft"><i class="fas fa-upload"></i> Upload Documents</a>
                <a href="{% url 'track_application' %}" class="dashboard-nav-item animate__animated animate__fadeInLeft"><i class="fas fa-tasks"></i> Track Application</a>
                <a href="{% url 'security_settings' %}" class="dashboard-nav-item animate__animated animate__fadeInLeft"><i class="fas fa-user-lock"></i> Security Settings</a>
                <a href="{% url 'insert_missing_id_card' %}" class="dashboard-nav-item animate__animated animate__fadeInLeft"><i class="fas fa-id-badge"></i> Insert Missing ID Card</a>
            </nav>
            <a href="{% url 'logout' %}" class="btn btn-primary animate__animated animate__fadeInLeft">Logout</a>
        </div>
        <main class="dashboard-app">
            <header class="dashboard-toolbar">
                <a href="#!" class="menu-toggle"><i class="fas fa-bars"></i></a>
            </header>
            <div class="dashboard-content">
                <h1 class="animate__animated animate__fadeInRight">Welcome, {{ user.username }}!</h1>
                <p class="animate__animated animate__fadeInRight">Manage your appointments, upload documents, and track your application status.</p>

                <section id="history" class="animate__animated animate__fadeInUp">
                    <h2>History of the National ID Card in Cameroon</h2>
                    <img src="{% static 'img/id_card.jpeg' %}" alt="National ID Card" class="img-fluid">
                    <p>The national ID card has been a crucial identification tool in Cameroon for decades. It was introduced to ensure every citizen can be identified and has access to public services. The process of obtaining an ID card has evolved over the years, incorporating modern technology to improve efficiency and security.</p>
                </section>

                <section id="benefits" class="animate__animated animate__fadeInUp">
                    <h2>Benefits of Having a National ID Card</h2>
                    <ul>
                        <li>Access to government services and benefits</li>
                        <li>Proof of identity for banking and financial transactions</li>
                        <li>Eligibility for voting in elections</li>
                        <li>Facilitates travel within the country</li>
                        <li>Essential for obtaining other documents like passports and driver's licenses</li>
                    </ul>
                </section>

                <section id="advantages" class="animate__animated animate__fadeInUp">
                    <h2>Advantages of Using Our Application</h2>
                    <ul>
                        <li>Convenient online booking for ID card appointments</li>
                        <li>Secure document upload and management</li>
                        <li>Real-time tracking of your application status</li>
                        <li>User-friendly interface</li>
                        <li>24/7 customer support</li>
                    </ul>
                </section>

                <section id="motto" class="animate__animated animate__fadeInUp">
                    <h2>Motto of Cameroon</h2>
                    <img src="{% static 'img/motto.jpeg' %}" alt="Motto of Cameroon" class="img-fluid">
                    <p>The motto of Cameroon is "Peace, Work, Fatherland". This reflects the core values that guide the nation.</p>
                </section>

                <section id="security-department" class="animate__animated animate__fadeInUp">
                    <h2>Department of Security</h2>
                    <img src="{% static 'img/police.jpeg' %}" alt="Department of Security" class="img-fluid">
                    <p>The Department of National Security is responsible for the issuance of national ID cards in Cameroon, ensuring the process is secure and efficient.</p>
                </section>
                <section id="contact-us" class="animate__animated animate__fadeInUp">
                    <h2>Contact Us</h2>
                    <form method="POST" action="{% url 'contact_us' %}" class="needs-validation" novalidate>
                        {% csrf_token %}
                        <div class="form-group">
                            <label for="name">Your Name</label>
                            <input type="text" class="form-control" id="name" name="name" required>
                            <div class="invalid-feedback">
                                Please enter your name.
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="email">Your Email</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                            <div class="invalid-feedback">
                                Please enter a valid email address.
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="message">Message</label>
                            <textarea class="form-control" id="message" name="message" rows="5" required></textarea>
                            <div class="invalid-feedback">
                                Please enter your message.
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Send Message</button>
                    </form>
                </section>
                
            </div>
        </main>
    </div>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <!-- Custom JavaScript -->
    <script src="{% static 'js/user_dashboard.js' %}"></script>

    <!-- Form Validation -->
    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function() {
            'use strict';
            window.addEventListener('load', function() {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function(form) {
                    form.addEventListener('submit', function(event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
    </script>
</body>
</html>
), and this insert missing id card page({% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Insert Missing ID Card</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'css/missing.css' %}">
    <div>
        <p><a href="{% url 'user_panel' %}" class="btn btn-primary">Return to Dashboard</a></p>

    </div>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Insert Missing ID Card</h1>
        <form method="POST" action="{% url 'insert_missing_id_card' %}" enctype="multipart/form-data" class="needs-validation" novalidate>
            {% csrf_token %}
            <div class="form-group">
                <label for="name">Your Name</label>
                <input type="text" class="form-control" id="name" name="name" required>
                <div class="invalid-feedback">
                    Please enter your name.
                </div>
            </div>
            <div class="form-group">
                <label for="email">Email Address</label>
                <input type="email" class="form-control" id="email" name="email" required>
                <div class="invalid-feedback">
                    Please enter a valid email address.
                </div>
            </div>
            <div class="form-group">
                <label for="phone">Phone Number</label>
                <input type="tel" class="form-control" id="phone" name="phone" required>
                <div class="invalid-feedback">
                    Please enter your phone number.
                </div>
            </div>
            <div class="form-group">
                <label for="id_card_image">Upload ID Card Image</label>
                <input type="file" class="form-control-file" id="id_card_image" name="id_card_image" required>
                <div class="invalid-feedback">
                    Please upload an image of the ID card.
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
) add a link on the missing id card to display the all the missing id card found in the platform. this is the models.py(from django.contrib.auth.models import AbstractUser
from django.db import models
from django.contrib.auth import get_user_model

class User(AbstractUser):
    ROLE_CHOICES = [
        ('user', 'User'),
        ('officer', 'Police Officer'),
        ('admin', 'Super Admin'),
    ]
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='user')
    name = models.CharField(max_length=100, default='user')  # Provide a default value
    phone = models.CharField(max_length=15, default='0000000000')  # Provide a default value
    address = models.TextField(null=True, blank=True)  # Temporarily allow null

class Office(models.Model):
    name = models.CharField(max_length=100)
    address = models.TextField()

class Appointment(models.Model):
    STATUS_CHOICES = (
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    )
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    officer = models.ForeignKey(User, related_name='appointments', on_delete=models.CASCADE, null=True, blank=True)
    office = models.ForeignKey(Office, on_delete=models.CASCADE)
    date = models.DateField()
    time = models.TimeField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')


class Document(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    birth_certificate = models.FileField(upload_to='documents/', blank=True, null=True)
    proof_of_nationality = models.FileField(upload_to='documents/', blank=True, null=True)
    passport_photos = models.FileField(upload_to='documents/', blank=True, null=True)
    residence_permit = models.FileField(upload_to='documents/', blank=True, null=True)
    marriage_certificate = models.FileField(upload_to='documents/', blank=True, null=True)
    death_certificate = models.FileField(upload_to='documents/', blank=True, null=True)
    sworn_statement = models.FileField(upload_to='documents/', blank=True, null=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)


class MissingIDCard(models.Model):
    name = models.CharField(max_length=255)
    email = models.EmailField()
    phone = models.CharField(max_length=20)
    id_card_image = models.ImageField(upload_to='missing_id_cards/')

    def __str__(self):
        return self.name

class Notification(models.Model):
    appointment = models.ForeignKey(Appointment, on_delete=models.CASCADE)
    message = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    is_read = models.BooleanField(default=False)

    def __str__(self):
        return f"Notification for {self.appointment}"
) and the view.py(from django.shortcuts import render, redirect
from django.contrib.auth import login as auth_login, logout as auth_logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth import get_user_model
from .forms import CustomUserCreationForm
from .forms import ForgotPasswordForm  # Make sure to import your form
from django.contrib.sites.shortcuts import get_current_site
from django.http import JsonResponse
from .models import Appointment, User
from django.utils.timezone import now
from .forms import AppointmentForm, UserForm
from .forms import DocumentUploadForm
from .models import Document
from django.http import HttpResponse
from .forms import MissingIDCardForm  # Assuming you have a form for handling this
from .forms import ContactUsForm
from django.core.mail import send_mail
from django.conf import settings      #try to access email backend
from .models import Notification
from django.db.models import Count
from django.utils import timezone
import calendar
from .forms import UserForm 






User = get_user_model()

def home(request):
    return render(request, 'booking/home.html')

def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')
    else:
        form = CustomUserCreationForm()
    return render(request, 'auth/register.html', {'form': form})

def login(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            user = form.get_user()
            auth_login(request, user)
            if user.role == 'admin':
                return redirect('admin_panel')
            elif user.role == 'officer':
                return redirect('officer_panel')
            else:
                return redirect('user_panel')
    else:
        form = AuthenticationForm()
    return render(request, 'auth/login.html', {'form': form})


def forgot_password(request):
    if request.method == 'POST':
        form = ForgotPasswordForm(request.POST)
        if form.is_valid():
            email = form.cleaned_data['email']
            try:
                user = User.objects.get(email=email)
            except User.DoesNotExist:
                user = None

            if user:
                current_site = get_current_site(request)
                mail_subject = 'Reset your password'
                message = render_to_string('password_reset_email.html', {
                    'user': user,
                    'domain': current_site.domain,
                    'uid': urlsafe_base64_encode(force_bytes(user.pk)),
                    'token': account_activation_token.make_token(user),
                })
                send_mail(mail_subject, message, 'your_email@example.com', [email])
            return redirect('password_reset_done')
    else:
        form = ForgotPasswordForm()
    
    return render(request, 'auth/forgot_password.html', {'form': form})

@login_required
def logout(request):
    auth_logout(request)
    return redirect('home')

@login_required
def user_panel(request):
    return render(request, 'panel/user_panel.html')

@login_required
def officer_panel(request):
    return render(request, 'panel/officer_panel.html')

@login_required
def admin_panel(request):
    return render(request, 'panel/admin_panel.html')



@login_required
def book_appointment(request):
    if request.method == 'POST':
        form = AppointmentForm(request.POST)
        if form.is_valid():
            appointment = form.save(commit=False)
            # Additional processing logic as needed
            appointment.save()
            return redirect('user_panel')  # Redirect to user panel or another appropriate view
        else:
            print(form.errors)  # Check form errors in console for debugging
    else:
        form = AppointmentForm()
    return render(request, 'panel/user/book_appointment.html', {'form': form})



@login_required
def upload_document(request):
    if request.method == 'POST':
        form = DocumentUploadForm(request.POST, request.FILES)
        if form.is_valid():
            document = form.save(commit=False)
            document.user = request.user
            document.save()
            return HttpResponse("Documents uploaded successfully")
        else:
            return HttpResponse("Error uploading documents. Please try again.")
    else:
        form = DocumentUploadForm()
    return render(request, 'panel/user/upload_document.html', {'form': form})


def track_application(request):
    return render(request, 'panel/user/track_application.html')

def security_settings(request):
    return render(request, 'panel/user/security_settings.html')



def insert_missing_id_card(request):
    if request.method == 'POST':
        form = MissingIDCardForm(request.POST, request.FILES)
        if form.is_valid():
            # Process the form data
            form.save()
            # Optionally, redirect to a success page or back to the dashboard
            return redirect('user_panel')  # Replace with your dashboard URL name
    else:
        form = MissingIDCardForm()
    
    return render(request, 'panel/user/insert_missing_id_card.html', {'form': form})


def contact_us(request):
    if request.method == 'POST':
        form = ContactUsForm(request.POST)
        if form.is_valid():
            name = form.cleaned_data['name']
            email = form.cleaned_data['email']
            message = form.cleaned_data['message']

            # Send email
            send_mail(
                'Contact Form Submission',
                f'Name: {name}\nEmail: {email}\nMessage: {message}',
                settings.DEFAULT_FROM_EMAIL,
                [settings.DEFAULT_FROM_EMAIL],
            )

            return render(request, 'contact_us_success.html')  # Replace with your success template
    else:
        form = ContactUsForm()

    return render(request, 'contact_us.html', {'form': form})

 #police view


@login_required
def manage_appointments(request):
    if request.user.role != 'officer':
        return render(request, '403.html', status=403)

    appointments = Appointment.objects.all()
    return render(request, 'panel/police/manage_appointments.html', {'appointments': appointments})

@login_required
def user_information(request):
    users = User.objects.all()
    return render(request, 'panel/police/user_information.html', {'users': users})

@login_required
def edit_appointment(request, pk):
    appointment = get_object_or_404(Appointment, pk=pk)
    if request.method == "POST":
        form = AppointmentForm(request.POST, instance=appointment)
        if form.is_valid():
            form.save()
            return redirect('manage_appointments')
    else:
        form = AppointmentForm(instance=appointment)
    return render(request, 'panel/police/edit_appointment.html', {'form': form})

@login_required
def delete_appointment(request, pk):
    appointment = get_object_or_404(Appointment, pk=pk)
    appointment.delete()
    return redirect('manage_appointments')

@login_required
def edit_user(request, pk):
    user = get_object_or_404(User, pk=pk)
    if request.method == "POST":
        form = UserForm(request.POST, instance=user)
        if form.is_valid():
            form.save()
            return redirect('user_information')
    else:
        form = UserForm(instance=user)
    return render(request, 'panel/police/edit_user.html', {'form': form})

@login_required
def delete_user(request, pk):
    user = get_object_or_404(User, pk=pk)
    if request.method == "POST":
        user.delete()
        return redirect('user_information')
    return render(request, 'panel/police/delete_user.html', {'user': user})


#notifier

@login_required
def notifications(request):
    notifications = Notification.objects.filter(user=request.user)

    # Gather data for chart
    current_year = timezone.now().year
    monthly_notifications = Notification.objects.filter(created_at__year=current_year).values('created_at__month').annotate(count=Count('id')).order_by('created_at__month')

    notification_labels = [calendar.month_name[i['created_at__month']] for i in monthly_notifications]
    notification_counts = [i['count'] for i in monthly_notifications]

    context = {
        'notifications': notifications,
        'notification_labels': notification_labels,
        'notification_counts': notification_counts,
    }

    return render(request, 'panel/police/notifications.html', context)) and the forms.py(from django.urls import path
from . import views
from django.contrib.auth import views as auth_views  # Add this import
from .views import user_panel, book_appointment, upload_document, MissingIDCardForm, manage_appointments, user_information


urlpatterns = [
    path('', views.home, name='home'),
    path('register/', views.register, name='register'),
    path('login/', views.login, name='login'),
    path('forgot-password/', views.forgot_password, name='forgot_password'),
    path('logout/', views.logout, name='logout'),
    path('user_panel/', views.user_panel, name='user_panel'),
    path('officer_panel/', views.officer_panel, name='officer_panel'),
    path('admin_panel/', views.admin_panel, name='admin_panel'),
    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name='password_reset_confirm.html'), name='password_reset_confirm'),
    path('reset/done/', auth_views.PasswordResetCompleteView.as_view(template_name='password_reset_complete.html'), name='password_reset_complete'),
    path('user/book-appointment/', views.book_appointment, name='book_appointment'),
    path('user/upload-document/', upload_document, name='upload_document'),
    path('track-application/', views.track_application, name='track_application'),
    path('security-settings/', views.security_settings, name='security_settings'),
    path('insert_missing_id_card/', views.insert_missing_id_card, name='insert_missing_id_card'),
    path('contact-us/', views.contact_us, name='contact_us'),

    path('police/manage-appointments/', views.manage_appointments, name='manage_appointments'),
    path('police/user-information/', views.user_information, name='user_information'),
    path('edit-appointment/<int:pk>/', views.edit_appointment, name='edit_appointment'),
    path('delete-appointment/<int:pk>/', views.delete_appointment, name='delete_appointment'),
    path('edit-user/<int:pk>/', views.edit_user, name='edit_user'),
    path('delete-user/<int:pk>/', views.delete_user, name='delete_user'),
    path('notifications/', views.notifications, name='notifications'),


   
]
) give me the optimal solution